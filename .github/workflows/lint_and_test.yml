# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Lint and test

on:
    push:
    pull_request:

jobs:
    pre_commit:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: [ '3.10', '3.11' ]

        steps:
            -   uses: actions/checkout@v3
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python-version }}

            -   name: Run pre-commit
                uses: pre-commit/action@v3.0.0

    unit_tests:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: [ '3.10', '3.11' ]
        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: kupala_test
                ports: [ '5432:5432' ]
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            -   uses: actions/checkout@v3

            -   name: Set up Python
                uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python-version }}

            -   name: Cache poetry
                uses: actions/cache@v3
                with:
                    path: |
                        ~/.cache/pypoetry
                        ~/.cache/pip
                    key: ${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

            -   name: Install dependencies
                run: |
                    python -m pip install --upgrade pip poetry
                    poetry config virtualenvs.create false
                    poetry install --no-interaction

            -   name: Test with pytest
                run: |
                    pytest --no-cov-on-fail --cov kupala/ --cov tests/

            -   name: Run tests
                run: python -m coverage run --branch --parallel-mode -m pytest

            -   name: Upload coverage data
                uses: actions/upload-artifact@v3
                with:
                    name: code_coverage
                    path: '.coverage.*'

    coverage:
        name: Coverage
        runs-on: ubuntu-latest
        needs: unit_tests
        strategy:
            fail-fast: false
            matrix:
                python-version: [ '3.10', '3.11' ]

        steps:
            - uses: actions/checkout@v3

            - uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install dependencies
              run: python -m pip install --upgrade coverage[toml]

            - name: Download data
              uses: actions/download-artifact@v3
              with:
                name: code_coverage

            - name: Generate coverage
              run: |
                python -m coverage combine
                python -m coverage html --skip-covered --skip-empty
                python -m coverage report --fail-under=100
            - name: Upload HTML report
              if: ${{ failure() }}
              uses: actions/upload-artifact@v3
              with:
                name: html-report
                path: htmlcov
